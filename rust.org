* Rust book
** Chapter 1 - Getting Started
*** Installation
- use ~rustup~
  - internet connection required
  - to update: ~rustup update~
  - to uninstall rust and rustup ~rustup self uninstall~
**** Lolcal Documentation
- to open the documentation ~rustup doc~
*** Hello world
- create a directory to store rust code

  #+NAME: hello_world
  #+BEGIN_SRC rust
    fn main() {
	println!("Hello, world!");
    }
  #+END_SRC

  #+NAME: compile
  #+begin_src shell
    rustc main.rs
    .\main.exe
  #+end_src
  
**** Anatomy of a Rust program
#+begin_src rust
  fn main() { }
#+end_src

- definition of ~main~ function
- parameter goes inside ()
- body function is wrapped by {}

  #+begin_src rust
    println!("Hello world!");
  #+end_src
  
- it prints text on the screen
- four space for indentation
- println! is a macro (because it ends with !)
- end the line with ;

*** Hello, Cargo
- create a new project
  #+begin_src shell
    cargo new hello_cargo
    cd hellp_cargo
  #+end_src

- to enable git ~cargo new --vcs=git~
- in the folder there is a file called Cargo.toml
  
  #+begin_example
  [package]
  name = "hello_cargo"
  version = "0.1.0"
  edition = "2021"

  # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

  [dependencies]
  #+end_example

- [package] section are configuring a package
- [dependencies] section use to list any dependencies
  - rust packages are called crates 

**** Building and Running
- ~cargo build~
  - create target/debug/hello_cargo.exe
- ~cargo run~
- ~cargo check~ to see if the program is compilable
- ~cargo build --relese~ building for release (optimization)
** Chapter 3 - Common Programming Concepts
*** Variables and mutability
- by default variables are immutable
- you can make the variables mutable adding ~mut~
  #+begin_src rust
    fn main() {
	let mut x = 5;
	println!("The value of x is: {x}");
	x = 6;
	println!("The value of x is: {x}");
    }
  #+end_src

  #+RESULT:
  The value of x is: 5
  The value of x is: 6

- /constants/ are values that are bound to a name and are not allowed
  to change
  - is not allowed to use ~mut~
  - declare with ~const~ not with ~let~
  - type must be declared
  - can be declared at any scope also global one (it is not allowed
    for the variables declared with ~let~)
  - the value must be a constant expression, not the result of a value
    that could be only be computed at runtime
  - src_rust{const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;}
  - naming convention: UPPERCASE_WITH_UNDERSCORE
  - constants are valid for the entire time a program runs, whithin
    the scope in which they are declared
- you can declare a new varialbe with the same name as previous
  variable

  #+begin_src rust
    fn main() {
	let x = 5;

	let x = x + 1; // new variable named x with value 6

	{
	    let x = x * 2; // new variable named x with value 12
	    println!("The value of x in the inner scope is: {x}"); // 12
	}

	println!("The value of x is: {x}"); //  6
  #+end_src

- shadowing is different from mut because we're creating a new
  variable and we can change the type of the value but reuse the same
  name

  #+begin_src rust
    let spaces = "    ";
    let spaces = spaces.len();
  #+end_src

*** Data Types
- Rust is a statically typed language
- Scalar
  - int
    - i8, u8
    - i16, u16
    - i32, u32
    - i64, u64
    - i128, u128
    - isize, usize
    - signed number are store using two's complement representation
    - literals
      - decimal: 98_222
      - hex: 0xff
      - octal: 0o77
      - binary: 0b1111_0000
      - byte (u8 only): b'A'
    - for overflow use the following methods:
      - wrapping_* (wrapping_add)
      - checked_* (return None)
      - overflowing_*
      - saturating_*
  - float
    - f32
    - f64 (default)
  - operation: +, -, *, /, %
  - bool: true of false
  - char
    - single quote
    - double quote is for String
- Compound: group multiple values into one type
  - tuples
  - array
