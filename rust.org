* Rust book
** Chapter 1 - Getting Started
*** Installation
- use ~rustup~
  - internet connection required
  - to update: ~rustup update~
  - to uninstall rust and rustup ~rustup self uninstall~
**** Lolcal Documentation
- to open the documentation ~rustup doc~
*** Hello world
- create a directory to store rust code

  #+NAME: hello_world
  #+BEGIN_SRC rust
    fn main() {
	println!("Hello, world!");
    }
  #+END_SRC

  #+NAME: compile
  #+begin_src shell
    rustc main.rs
    .\main.exe
  #+end_src
  
**** Anatomy of a Rust program
#+begin_src rust
  fn main() { }
#+end_src

- definition of ~main~ function
- parameter goes inside ()
- body function is wrapped by {}

  #+begin_src rust
    println!("Hello world!");
  #+end_src
  
- it prints text on the screen
- four space for indentation
- println! is a macro (because it ends with !)
- end the line with ;

*** Hello, Cargo
- create a new project
  #+begin_src shell
    cargo new hello_cargo
    cd hellp_cargo
  #+end_src

- to enable git ~cargo new --vcs=git~
- in the folder there is a file called Cargo.toml
  
  #+begin_example
  [package]
  name = "hello_cargo"
  version = "0.1.0"
  edition = "2021"

  # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

  [dependencies]
  #+end_example

- [package] section are configuring a package
- [dependencies] section use to list any dependencies
  - rust packages are called crates 

**** Building and Running
- ~cargo build~
  - create target/debug/hello_cargo.exe
- ~cargo run~
- ~cargo check~ to see if the program is compilable
- ~cargo build --relese~ building for release (optimization)
** Chapter 3 - Common Programming Concepts
*** Variables and mutability
- by default variables are immutable
- you can make the variables mutable adding ~mut~
  #+begin_src rust
    fn main() {
	let mut x = 5;
	println!("The value of x is: {x}");
	x = 6;
	println!("The value of x is: {x}");
    }
  #+end_src

  #+RESULT:
  The value of x is: 5
  The value of x is: 6

- /constants/ are values that are bound to a name and are not allowed
  to change
  - is not allowed to use ~mut~
  - declare with ~const~ not with ~let~
  - type must be declared
  - can be declared at any scope also global one (it is not allowed
    for the variables declared with ~let~)
  - the value must be a constant expression, not the result of a value
    that could be only be computed at runtime
  - src_rust{const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;}
  - naming convention: UPPERCASE_WITH_UNDERSCORE
  - constants are valid for the entire time a program runs, whithin
    the scope in which they are declared
- you can declare a new varialbe with the same name as previous
  variable

  #+begin_src rust
    fn main() {
	let x = 5;

	let x = x + 1; // new variable named x with value 6

	{
	    let x = x * 2; // new variable named x with value 12
	    println!("The value of x in the inner scope is: {x}"); // 12
	}

	println!("The value of x is: {x}"); //  6
  #+end_src

- shadowing is different from mut because we're creating a new
  variable and we can change the type of the value but reuse the same
  name

  #+begin_src rust
    let spaces = "    ";
    let spaces = spaces.len();
  #+end_src

*** Data Types
- Rust is a statically typed language
- Scalar
  - int
    - i8, u8
    - i16, u16
    - i32, u32
    - i64, u64
    - i128, u128
    - isize, usize
    - signed number are store using two's complement representation
    - literals
      - decimal: 98_222
      - hex: 0xff
      - octal: 0o77
      - binary: 0b1111_0000
      - byte (u8 only): b'A'
    - for overflow use the following methods:
      - wrapping_* (wrapping_add)
      - checked_* (return None)
      - overflowing_*
      - saturating_*
  - float
    - f32
    - f64 (default)
  - operation: +, -, *, /, %
  - bool: true of false
  - char
    - single quote
    - double quote is for String
- Compound: group multiple values into one type
  - tuples: comma-separated list of values inside parentheses
    - each position in the tuple has a type (they don't have to be the
      same)
      src_rust{let tup: (i32, f64, u8) = (500, 6.4, 1);}
    - use pattern matching to /destructure/ a tuple
      #+begin_src rust
	fn main() {
	    let tup = (500, 6.4, 1);

	    let (x, y, z) = tup;

	    println!("The value of y is: {y}"); // 6.4
	}
      #+end_src
    - the tuple can be accessed using a period (.)
    - first index starts from 0
      #+begin_src rust
	fn main() {
	    let x: (i32, f64, u8) = (500, 6.4, 1);

	    let five_hunderd = x.0;

	    let six_point_four = x.1;

	    let one = x.2;
	}
      #+end_src
    - the tuple without vale '()' is called /unit/ and it represent an
      empty value or an empty return type
      - expression implicitly return the unit value if they don't
        return any other value
  - array: comma-separated list inside the square barackets:
    - every element of an array must have the same types
    - fixed length
    - src_rust{let a = [1, 2, 3, 4, 5];}
    - data stored in the stackz
    - src_rust{let a = [3; 5] // initial value; length}
    - accessing:
      #+begin_src rust
	fn main() {
	    let a = [1, 2, 3, 4];

	    let first = a[0];
	    let second = a[1];
	}
      #+end_src
    - rust check runtime if the access of an array is valid, and it
      throw a runtime error in case it is not valid
*** Functions
- ~fn~ declare new functions
- snake_case for function and variables
  #+begin_src rust
    fn main() {
	println!("Hello, world!");

	another_function();
    }

    fn another_function() {
	println!("Another function.");
    }
  #+end_src
- parameters: special variables that are part of a function's
  signature
- the concrete parameters are called arguments
  #+begin_src rust
    fn main() {
	another_function(5);
    }

    fn another_function(x: i32) {
	println!("The value of x is: {x}");
    }
  #+end_src
- ~another_function~ has one parameter of type ~i32~ named ~x~
- in function signature, the type of the parameter must be declared
**** Statements and Expressions
- function bodies are made up of a series of statements optionally
  ending in an expression
- statements are instructions that perform some action and do not
  return a value
- expression evaluate to a resultant value
- example
  - creating a variable and assigning a value is a statement (let)
  - function definitions are also statements
  - calling a function is an expression
  - calling a macro is an expression
  - a new scope block is an expression
    #+begin_src rust
      fn main() {
	  let y = {
	      let x = 3;
	      x + 1 // expression doesn't have the semicolon at the end
	  };

	  println!("The value of y is: {y}");
      }
    #+end_src
**** Functions with Return Values
- the return doesn't have a name, it requires only the declaration of
  the type after an arrow ->
- you can return with the keyoword ~return~ with the value
- the function returns the last expression implicitly
#+begin_src rust
  fn main() {
      let x = plus_one(5);

      println!("The value of x is: {x}");
  }

  fn plus_one(x: i32) -> i32 {
      x + 1
  }
#+end_src
*** Comments
- comments starts with ~//~
*** Control Flow
**** if Expression
- the expression allows allow to branch your code depending on
  conditions
  #+begin_src rust
    fn main() {
	let number = 3;

	if number < 5 {
	    println!("condition was true");
	} else {
	    println!("condition was false");
	}
    }
  #+end_src
- ~else~ is optional
- the condition must be a ~bool~
- you can use multiple condition combining ~if~ ~else~ and ~else if~
  #+begin_src rust
    fn main() {
	let number = 6;

	if number % 4 == 0 {
	    println!("number is divisible by 4");
	} else if number % 3 == 0 {
	    println!("number is divisible by 3"); // first condition true, it goes here
	} else if number % 2 == 0 {
	    println!("number is divisible by 2"); // not here
	} else {
	    println!("number is not divisible by 4, 3, or 2");
	}
    }
  #+end_src
- it checks each if expression in turn and executes the first body for
  which the condition evaluates to true
- Because if is an expression, we can combine it with let
  #+begin_src rust
    fn main() {
	let condition = true;
	let number = if condition { 5 } else { 6 };

	println!("The value of number is: {number}"); // 5
    }
  #+end_src
- in each branch the if block must evaluate the same type
**** Loops
- loop, while, for
***** Loop
- the ~loop~ tells rust to execute a code until a ~break~
- ~continue~ skip over the remaining code and restart the iteration
  #+begin_src rust
    fn main() {
	let mut counter = 0;

	let result = loop {
	    counter += 1;

	    if counter == 10 {
		break counter * 2;
	    }
	};

	println!("The result is {result}"); // 20
    }
  #+end_src

- it is possible to nest the loops
  #+begin_src rust
    fn main() {
	let mut count = 0;
	'counting_up: loop {
	    println!("count = {count}");
	    let mut remaining = 10;

	    loop {
		println!("remaining = {remaining}");
		if remaining == 9 {
		    break;
		}
		if count == 2 {
		    break 'counting_up;
		}
		remaining -= 1;
	    }

	    count += 1;
	}
	println!("End count = {count}");
    }
  #+end_src

  #+begin_example
  count = 0
  remaining = 10
  remaining = 9
  count = 1
  remaining = 10
  remaining = 9
  count = 2
  remaining = 10
  End count = 2
  #+end_example
***** While
- pattern to avoid the use if ~loop~, ~if~ and ~break~
  #+begin_src rust
    fn main() {
	let mut number = 3;

	while number != 0 {
	    println!("{number}!"); // 3 2 1

	    number -= 1;
	}

	println!("LIFTOFF!!!");
    }
  #+end_src
***** For
- loops over element in a collection
  #+begin_src rust
    fn main() {
	let a = [10, 20, 30, 40, 50];

	for element in a {
	    println!("the value is: {element}"); //10 20 30 40 50
	}
    }
  #+end_src
- you can use the for instead of while, thanks to Range
  #+begin_src rust
    fn main() {
	for number in (1..4).rev() {
	    println!("{number}!"); // 3 2 1
	}
	println!("LIFTOFF!!!");
    }
  #+end_src

** Chapter 4 - Ownership
*** What is Ownership?
- Ownership is a set of rules that govern how a Rust program manages
  memory
- Ownership rules
  - Each value in Rust has an owner
  - There can only be one owner at a time
  - When the owner goes out of scope, the value will be dropped
**** Variable Scope
#+begin_src rust
  #![allow(unused)]
  fn main() { // ss is not valid here, it's not yet declared
      let s = "hello"; // s is valid from this point forward

      // do stuff with s

  } // this scope is now over, and s is no longer valid
#+end_src
- s refers to a string literal
- the variable is valid from the point at which it's declared until
  the end of the current scope
**** String Type
- data types from chap 3 has a known size, so they can be stored in
  the stack (copied and create an indipendent instance)
- all the stuff seen here can be applied to other types stored in the
  heap
- literal string are immutable, String is mutable but it is stored in
  the stack
  #+begin_src rust
    fn main() {
	let mut s = String::from("hello");

	s.push_str(", world!"); // push_str() appends a literal to a String

	println!("{}", s); // This will print `hello, world!`
    }
  #+end_src
- the memory must be request from the memory allocator at runtime
  ex. str_rust{String::form)
- we need a way of returning this memory to the allocator when we're
  done with our String
  - done when the variable exit form the scope (rust call the function
    drop)
    #+begin_src rust                       //  | var | s1  | s2  |
      fn main() {                          //  |-----|-----|-----|    
	  let s1 = String::from("hello");  //  |     | own |     |
	  let s2 = s1;                     //  |     |  X  | own |
      } // if you'd drop s1 and s2 you'll free two times the memory (HELP)!
    #+end_src
- it is copied the pointer not the data
- shallow copy: pointer, length and capacity withoud data
- in rust it is called moved since the source is invalidated
**** Clone
- deep copy in rust is done with ~clone()~
- primitive data type has knonw size, that can be reserved at compile
  time, they are copied using ~Copy()~ trait
**** Ownership and Functions
- passing a variable to a function will move or copy as assignment does
#+begin_src rust
  fn main() {
      let s = String::from("hello");  // s comes into scope

      takes_ownership(s);             // s's value moves into the function...
				      // ... and so is no longer valid here

      let x = 5;                      // x comes into scope

      makes_copy(x);                  // x would move into the function,
				      // but i32 is Copy, so it's okay to still
				      // use x afterward

  } // Here, x goes out of scope, then s. But because s's value was moved, nothing
    // special happens.

  fn takes_ownership(some_string: String) { // some_string comes into scope
      println!("{}", some_string);
  } // Here, some_string goes out of scope and `drop` is called. The backing
    // memory is freed.

  fn makes_copy(some_integer: i32) { // some_integer comes into scope
      println!("{}", some_integer);
  } // Here, some_integer goes out of scope. Nothing special happens.
#+end_src
**** Return Values and Scope
- Returning values can also transfer ownership
  #+begin_src rust
    fn main() {
	let s1 = gives_ownership();         // gives_ownership moves its return
					    // value into s1

	let s2 = String::from("hello");     // s2 comes into scope

	let s3 = takes_and_gives_back(s2);  // s2 is moved into
					    // takes_and_gives_back, which also
					    // moves its return value into s3
    } // Here, s3 goes out of scope and is dropped. s2 was moved, so nothing
      // happens. s1 goes out of scope and is dropped.

    fn gives_ownership() -> String {             // gives_ownership will move its
						 // return value into the function
						 // that calls it

	let some_string = String::from("yours"); // some_string comes into scope

	some_string                              // some_string is returned and
						 // moves out to the calling
						 // function
    }

    // This function takes a String and returns one
    fn takes_and_gives_back(a_string: String) -> String { // a_string comes into
							  // scope

	a_string  // a_string is returned and moves out to the calling function
    }
  #+end_src
**** Stack  & Heap
- stack and heap are of mem available to your code to use at runtime
- Stack store values in the order it gets them and removes the values
  in the opposite order (LIFO)
- heap is referred to alloc
  - memory allocator finds an empty spot in the heap that is  big
    enogh (allocating in the heap)
*** Referenecs and Borrowing
- reference is like a pointer in that it's an address we can follow to
  access the data store at that address. The data is owned by some
  other variables
- the referecnce is guaranteed to point to a valid value
  #+begin_src rust
    fn main() {
	let s1 = String::from("hello");

	let len = calculate_length(&s1);

	println!("The length of '{}' is {}.", s1, len);
    }

    fn calculate_length(s: &String) -> usize {
	s.len()
    }
  #+end_src
- &String reference of a string, they allow to refer to some value
  without taking the ownership
- the opposite of referencing (&) is dereferencing (*)
- since the reference doesn't have the ownership, the data will not
  droped when the variables goes out the scope
- Borrowing: the act of creating a reference
- reference are immutable by default, modifying the borrowed data is
  not allowed
**** Mutable references
#+begin_src rust
  fn main() {
      let mut s = String::from("hello"); // s must be mutable

      change(&mut s);// reference with &mut s
  }

  fn change(some_string: &mut String) { //the function accept mutable refrence
      some_string.push_str(", world");
  }
#+end_src
- having multiple mutable reference to a value is not allowed
**** Dangling References
- dangling pointer: a pointer that references a location in memory
  that may have been given to someone else
**** Rules of Reference
- At any given time, you can have either one mutable reference or any
  number of immutable references.
- References must always be valid.
*** Slice type
- slices: reference to a contiguos sequence of element in a collection
- since it is a reference, slice does not have owenership
- if you want to iterate a collection with index
  src_rust{for (i, &item) in bytes.iter().enumerate()}
  - src_rust{iter()} return each element in a collection
  - src_rist{enumerate()} return each element as part of a tuple
#+begin_src rust
  fn main() {
      let s = String::from("hello world");

      let hello = &s[0..5]; // string slice
      let world = &s[6..11]; // string slice
  }
#+end_src
- [0..2] == [..2]
- [3..len] == [3..]
- [0..len] == [..]
**** String Literals as Slices
#+begin_src rust
  #![allow(unused)]
  fn main() {
      let s = "Hello, world!"; // s is &str
    }
#+end_src
**** String Slices as Parameter
#+begin_src rust
  fn first_word(s: &String) -> &str {
      ...
  }

  fn first_word(s: &str) -> &str {
      ...
  }
#+end_src
**** Other slices
- slice to array &[T]

** Chapter 5 - Structures
*** Defining and Instantiating Structs
- structs hold multiple related values of different types
- members of struct have a name
- to define a struct
  #+begin_src rust
    struct User { // User is the structure name
	active: bool,     // active is the name of a field of the structure
	username: String,
	email: String,
	sign_in_count: u64,
    }
  #+end_src
- to use a struct, it is mandatory to create an instance of that struct
- instantiating a struct require values for every field
  #+begin_src rust
    fn main() {
	let user1 = User {
	    active: true,
	    username: String::from("someusername123"),
	    email: String::from("someone@example.com"),
	    sign_in_count: 1,
	};
    }
  #+end_src
- to get or set a specific value from or to a struct we use the dot
  notation
- the entire struct must be mutable, it is not allowed to have some
  fileds mutable and some immutable
**** Using the Field Init Shorthand
#+begin_src rust
  fn build_user(email: String, username: String) -> User {
      User {

	  active: true,
	  username,
	  email,
	  sign_in_count: 1,
      }
  }
#+end_src
- use the same parameter name as the field
**** Creating Instances from Other Instances with Struct Update Syntax
- the syntax specifies that the remaining fileds not explicitly set
  should have the same values as the fields in the given instance
  #+begin_src rust
    fn main() {
	// --snip--

	let user2 = User {
	    email: String::from("another@example.com"),
	    ..user1
	};
    }
  #+end_src
- note that the struct update syntax use = like an assignment (it
  moves the data), the source data could become invalid. (See the
  differences between move and copy for every fields)
**** Using Tuple Structs Without Named Fields to Create Different Types
- tuple struct: add a meaning to a struct but without using name for
  the fields
  #+begin_src rust
    struct Color(i32, i32, i32);
    struct Point(i32, i32, i32);

    fn main() {
	let black = Color(0, 0, 0);
	let origin = Point(0, 0, 0);
    }
  #+end_src
- black and origin in that case has different types
**** Unit-Like Structs Without Any Fields
- struct with no fields are called unit-like struct. They are similare
  to ()
- the unit-like structs can be useful whe you need to implement a
  trait on some type
  #+begin_src rust
    struct AlwaysEqual;

    fn main() {
	let subject = AlwaysEqual;
    }
  #+end_src
*** Use Structs
#+begin_src rust
  struct Rectangle {
      width: u32,
      height: u32,
  }

  fn main() {
      let rect1 = Rectangle {
	  width: 30,
	  height: 50,
      };

      println!(
	  "The area of the rectangle is {} square pixels.",
	  area(&rect1)
      );
  }

  fn area(rectangle: &Rectangle) -> u32 {
      rectangle.width * rectangle.height
  }
#+end_src
**** Derived Traits
#+begin_src rust
  #[derive(Debug)]
  struct Rectangle {
      width: u32,
      height: u32,
  }

  fn main() {
      let rect1 = Rectangle {
	  width: 30,
	  height: 50,
      };

      println!("rect1 is {:?}", rect1); // inline
      println!("rect1 is {:#?}" rect1); // not inline
  }
#+end_src
- it is possible to use ~dbg!~ macro, it writes on stderr
  #+begin_src rust
    #[derive(Debug)]
    struct Rectangle {
	width: u32,
	height: u32,
    }

    fn main() {
	let scale = 2;
	let rect1 = Rectangle {
	    width: dbg!(30 * scale),
	    height: 50,
	};

	dbg!(&rect1);
    }
  #+end_src
*** Method Syntax
- method are functions defined within the context of a struct (enum or trait)
- first parameter of a method is always self
  - self represnets the instance of the struct the method being called
    on
**** Defining Methods
#+begin_src rust
  #[derive(Debug)]
  struct Rectangle {
      width: u32,
      height: u32,
  }

  impl Rectangle { // start of implementation block
      fn area(&self) -> u32 { // definition of area method
	  self.width * self.height
      }
  }

  fn main() {
      let rect1 = Rectangle {
	  width: 30,
	  height: 50,
      };

      println!(
	  "The area of the rectangle is {} square pixels.",
	  rect1.area()
      );
  }
#+end_src
- &self is a shor for self: &Self
- whithin an impl block, the type Self is an alias for the type that
  the impl block is for
- &self because the method borrows the Self instance
- methods can take the ownership of self, borrow self immutably or
  borrow self mutably (&mut self)
- it is possible to give a method the same name as one of the struct's fields.
  - it is used for the getters
- automatic referencing and dereferencing: when a method is called
  with object.something(), rust automatically adds in & &mut or * so
  object matches the signature of the methods
  #+begin_src rust
    #[derive(Debug)]
    struct Rectangle {
	width: u32,
	height: u32,
    }

    impl Rectangle {
	fn area(&self) -> u32 {
	    self.width * self.height
	}

	fn can_hold(&self, other: &Rectangle) -> bool {
	    self.width > other.width && self.height > other.height
	}
    }

    fn main() {
	let rect1 = Rectangle {
	    width: 30,
	    height: 50,
	};
	let rect2 = Rectangle {
	    width: 10,
	    height: 40,
	};
	let rect3 = Rectangle {
	    width: 60,
	    height: 45,
	};

	println!("Can rect1 hold rect2? {}", rect1.can_hold(&rect2));
	println!("Can rect1 hold rect3? {}", rect1.can_hold(&rect3));
    }
  #+end_src
- add the parameter after selfz
**** Associated Functions
- all function defined within an impl block are called associated functions
- it is possible to don't have self as first parameter
- Associated functions that arent' methods are often used for
  constructors (often called new)
  #+begin_src rust
    #[derive(Debug)]
    struct Rectangle {
	width: u32,
	height: u32,
    }

    impl Rectangle {
	fn square(size: u32) -> Self {
	    Self {
		width: size,
		height: size,
	    }
	}
    }

    fn main() {
	let sq = Rectangle::square(3);
    }
  #+end_src
- return type is Self
- to call associated function we use the ~::~ syntax
  - let sq = Rectangle::square(3)
**** Multiple impl Blocks
- Each struct is allowed to have multiple impl blocks
  #+begin_src rust
    #[derive(Debug)]
    struct Rectangle {
	width: u32,
	height: u32,
    }

    impl Rectangle {
	fn area(&self) -> u32 {
	    self.width * self.height
	}
    }

    impl Rectangle {
	fn can_hold(&self, other: &Rectangle) -> bool {
	    self.width > other.width && self.height > other.height
	}
    }

    fn main() {
	let rect1 = Rectangle {
	    width: 30,
	    height: 50,
	};
	let rect2 = Rectangle {
	    width: 10,
	    height: 40,
	};
	let rect3 = Rectangle {
	    width: 60,
	    height: 45,
	};

	println!("Can rect1 hold rect2? {}", rect1.can_hold(&rect2));
	println!("Can rect1 hold rect3? {}", rect1.can_hold(&rect3));
    }
  #+end_src
** Chapter 06 - Enum
- enums describes variants
*** Defining an Enum
#+begin_src rust
  enum IpAddrKind {
      V4,
      V6,
  }

  fn main() {
      let four = IpAddrKind::V4;
      let six = IpAddrKind::V6;

      route(IpAddrKind::V4);
      route(IpAddrKind::V6);
  }

  fn route(ip_kind: IpAddrKind) {}
#+end_src
**** Enum Values
- the variants of the enum are namespaced under its identifier, using
  the double colon (::) notation
- it si possilbe to put data directly into each enum variant
  - avoid the use of struct
  #+begin_src rust
    fn main() {
	enum IpAddr {
	    V4(String),
	    V6(String),
	}

	let home = IpAddr::V4(String::from("127.0.0.1"));

	let loopback = IpAddr::V6(String::from("::1"));
    }
  #+end_src
- the name of each enum variant becomes a constructor of an instance
  of the enum
- each variant can have different types and amounts of associated data
  #+begin_src rust
    fn main() {
	enum IpAddr {
	    V4(u8, u8, u8, u8),
	    V6(String),
	}

	let home = IpAddr::V4(127, 0, 0, 1);

	let loopback = IpAddr::V6(String::from("::1"));
    }
  #+end_src
- enum can embeds structs and other enum
  #+begin_src rust
    fn main() {
	enum Message {
	    Quit, // no data
	    Move { x: i32, y: i32 }, // struct
	    Write(String), // string
	    ChangeColor(i32, i32, i32), // tuple
	}

	impl Message {
	    fn call(&self) {
		// method body would be defined here
	    }
	}

	let m = Message::Write(String::from("hello"));
	m.call();
    }
  #+end_src
- the body of the method would use self to get the value
**** The Option Enum and its advantages of Over Null Values
- Option is an enum defined inside the std library that encodes the
  very common scenario in which a value could be something or it could
  be nothing
- Null is not present in Rust
#+begin_src rust
  enum Option<T> {
      None,
      Some(T),
  }
#+end_src
- Option<T> is included in the prelude
  #+begin_src rust
	let some_number = Some(5);
	let some_char = Some('e');

	let absent_number: Option<i32> = None;
  #+end_src

- remember: Option<T> and T are diffrent types
